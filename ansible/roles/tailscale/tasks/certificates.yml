---
- name: Assert that tailscale_cert_domain is not empty
  ansible.builtin.assert:
    that:
      - tailscale_cert_domain | length > 0
    quiet: true

- name: Assert that tailscale_cert_dir is not empty
  ansible.builtin.assert:
    that:
      - tailscale_cert_dir | length > 0
    quiet: true

- name: Assert that tailscale_cert_filename is not empty
  ansible.builtin.assert:
    that:
      - tailscale_cert_filename | length > 0
    quiet: true

- name: Assert that tailscale_cert_private_key_dir is not empty
  ansible.builtin.assert:
    that:
      - tailscale_cert_private_key_dir | length > 0
    quiet: true

- name: Assert that tailscale_cert_private_key_filename is not empty
  ansible.builtin.assert:
    that:
      - tailscale_cert_private_key_filename | length > 0
    quiet: true

- name: Ensure {{ tailscale_cert_dir }} exists
  ansible.builtin.file:
    path: "{{ tailscale_cert_dir }}"
    state: directory

- name: Ensure {{ tailscale_cert_private_key_dir }} exists
  ansible.builtin.file:
    path: "{{ tailscale_cert_private_key_dir }}"
    state: directory

- name: Check that certificates exist
  stat:
    path: "{{ item }}"
  loop:
    - "{{ tailscale_cert_dir }}/{{ tailscale_cert_filename }}"
    - "{{ tailscale_cert_private_key_dir }}/{{ tailscale_cert_private_key_filename }}"
  register: stat_certs

- name: Run tailscale cert and generate cert
  ansible.builtin.command: >
    tailscale cert
      --cert-file="{{ tailscale_cert_dir }}/{{ tailscale_cert_filename }}"
      --key-file="{{ tailscale_cert_private_key_dir }}/{{ tailscale_cert_private_key_filename }}"
      "{{ tailscale_cert_domain }}"
  when: not (stat_certs.results | map(attribute='stat.exists')) is all

- name: Allow caddy uid in /etc/default/tailscaled
  ansible.builtin.lineinfile:
    create: true
    dest: /etc/default/tailscaled
    regexp: "^#?TS_PERMIT_CERT_UID"
    line: "TS_PERMIT_CERT_UID=\"caddy\""
    insertafter: EOF
    state: present
  notify:
    - Restart tailscale
  when: tailscale_cert_caddy_user_permission | bool
